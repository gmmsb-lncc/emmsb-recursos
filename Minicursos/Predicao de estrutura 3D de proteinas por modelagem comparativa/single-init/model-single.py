# -*- coding: utf-8 -*-
# File: model-single.py
# Reading the ali file and generating 3 models
from modeller import *
from modeller.automodel import *
from modeller.scripts import complete_pdb

log.verbose()
env = environ()

#Considering heteroatoms and waters molecules
env.io.hetatm = env.io.water = True
# Directories with input atom files:
env.io.atom_files_directory = './:../atom_files'
env.libs.topology.read(file='$(LIB)/top_heav.lib')
env.libs.parameters.read(file='$(LIB)/par.lib')

# MODEL CONSTRUCTION
# Modelling 'sequence' with file.ali
a = automodel(env, alnfile='alvo.ali',
              knowns =('./5lsa', './4pyi'),
              sequence='alvo',
              assess_methods=(assess.DOPE, assess.normalized_dope, assess.GA341)
              )

# Generating 5 models
a.starting_model = 1
a.ending_model = 5
a.make()

# Get clusters
a.cluster(cluster_cut=1.00)
# END OF MODEL CONSTRUCTION


# PRINT RESULTS
# Open a file
fo = open("model-single.out", "w")

# Get a list of all successfully built models from a.outputs
ok_models = filter(lambda x: x['failure'] is None, a.outputs)

# Printing out a summary of all successfully generated models
print >> fo, '\n>> Summary of successfully produced model'
fields = [x for x in ok_models[0].keys() if x.endswith(' score')]
fields.sort()
fields = ['molpdf'] + fields
header = '%-25s ' % 'Filename' + " ".join(['%14s' % x for x in fields])
print >> fo, header
print >> fo, '-' * len(header)
for mdl in ok_models:
    text = '%-25s' % mdl['name']
    for field in fields:
	if isinstance(mdl[field], (tuple, list)):
	    text = text + ' %14.5f' % mdl[field][0]
	else:
	    text = text + ' %14.5f' % mdl[field]
    print >> fo, text
print >> fo, ''

# Printing top model results
print >> fo, '>> Top model results:'
  
# Rank models by molpdf score
key = 'molpdf'
ok_models.sort(lambda a,b: cmp(a[key], b[key]))
# Get top model - molpdf
m = ok_models[0]
print "Top model_molpdf: %s (molpdf %.3f)" % (m['name'], m[key])
print >> fo, 'molpdf: ', m[key], '(file: ', m['name'], ')'

# Rank models by DOPE score
key = 'DOPE score'
ok_models.sort(lambda a,b: cmp(a[key], b[key]))
# Get top model - DOPE
m = ok_models[0]
print "Top model_DOPE: %s (DOPE score %.3f)" % (m['name'], m[key])
print >> fo, 'DOPE score: ', m[key], '(file: ', m['name'], ')'

# Rank models by normalized DOPE score
key = 'GA341 score'
ok_models.sort(lambda a,b: cmp(a[key], b[key]))
# Get top model - normalized DOPE
m = ok_models[0]
print "Top model_GA341: %s (GA341 score %.3f)" % (m['name'], m[key][0])
print >> fo, 'GA341 score: ', m[key][0], '(file: ', m['name'], ')'

# Rank models by normalized DOPE score
key = 'Normalized DOPE score'
ok_models.sort(lambda a,b: cmp(a[key], b[key]))
# Get top model - normalized DOPE
m = ok_models[0]
print "Top model_nDOPE (z): %s (Normalized DOPE score %.3f)" % (m['name'], m[key])
print >> fo, 'Normalized DOPE score: ', m[key], '(file: ', m['name'], ')'

# Read a model previously generated by Modeller's automodel class
mdl = complete_pdb(env, './cluster.opt')

# Select all atoms in the first chain
atmsel = selection(mdl)

score = atmsel.assess_dope()
zscore = mdl.assess_normalized_dope()
score2 = mdl.assess_ga341()

# Printing assess results
print >> fo, '\n>> Cluster results:'

fo2 = open("cluster.opt", "r")
lines = [ i.rstrip() for i in fo2.readlines()]
# 3rd line
print >> fo, lines[1], '(molpdf)'

print >> fo, 'DOPE score: ', score
print >> fo, 'GA341 score: ', score2[0]
print >> fo, 'Normalized DOPE score: ', zscore

# Close opened file
fo.close()
#END OF PRINT RESULTS
